import Configuration from"./Configuration";import*as Utilities from"./Utilities";export default function Play(event){let validKey=Configuration.arrowKeys.find(key=>key.id==event.keyCode);if(!validKey)return;let dx=validKey.dx,dy=validKey.dy,player=Configuration.player1.active?Configuration.player1:Configuration.player2,opponent=player===Configuration.player1?Configuration.player2:Configuration.player1,[x1,y1]=player.fromTile;player.toTile=[x1+dx,y1+dy];let[x2,y2]=player.toTile;if(x2<0||x2>9||y2<0||y2>9)return void alert(`${Configuration.outOfBounds} ${player.name}`);let toTileObject=Configuration.gameboard[y2][x2]instanceof Object?Configuration.gameboard[y2][x2].type:null;switch(console.log("+++ Starting Play.switch(toTileObject"),toTileObject){case"wall":alert(`${Configuration.foundWall} ${Configuration.player1.name}...`);break;case"chest":console.log("*** Starting switch (chest)"),LootChest(player,player.toTile),Utilities.CheckForOpponent(player,opponent)&&Battle(player,opponent);break;case"player":console.log("*** Starting switch (player)"),Battle(player,opponent);break;default:{console.log("*** Starting Play.switch (default)"),RestoreChest(),player.clearToken(),player.fillToken();let[x1,y1]=player.fromTile,[x2,y2]=player.toTile;Configuration.gameboard[y1][x1]=null,Configuration.gameboard[y2][x2]=player,player.fromTile=player.toTile,player.steps++,console.log("*** Ending Play.switch (default)")}Utilities.CheckForOpponent(player,opponent)&&(Battle(player,opponent),[player,opponent]=[opponent,player])}console.log("--- Ending Play.switch(toTileObject)"),Utilities.UpdateGameTable(),console.log("player"),console.log(player),console.log("opponent"),console.log(opponent)}export function Battle(player,opponent){console.log("+++ Starting Battle(player, opponent)");let attackMode=prompt(`The battle lines are drawn. (A)ttack or (D)efend ${player.name}?`).toLowerCase();switch(console.log(`Battle.PlayerBattle() - Setting attack mode: ${attackMode}`),attackMode){case"a":Attack(player,opponent);break;case"d":Defend(player,opponent);break;default:console.log(`Invalid battle code ${player.name}. Try again`)}function Attack(player,opponent){console.log("+++ Starting Battle.PlayerAttacks()");let damage=Utilities.RandomNumber(player.weapon.maxDamage/2,player.weapon.maxDamage);console.log(`${player.name} attacks ${opponent.name} for ${damage} damage`),opponent.life-=damage,console.log(`${opponent.name}'s life left: ${opponent.life}`),Utilities.UpdateGameTable(),Utilities.EndTurn(),console.log("--- Ending Battle.PlayerAttacks()")}function Defend(player,opponent){console.log("+++ Starting Battle.Defend()");let damage=Utilities.RandomNumber(player.weapon.maxDamage/4,player.weapon.maxDamage/2);console.log(`${player.name} defends against ${opponent.name} for ${damage} damage`),player.life-=damage,console.log(`${player.name}'s life left: ${player.life}`),Utilities.UpdateGameTable(),Utilities.EndTurn(),console.log("--- Ending Battle.Defend()")}console.log("--- Ending Battle(player, opponent)")}export function LootChest(player,toTile){console.log("+++ Starting LootChest.LootChest(player)"),console.log(player),console.log(toTile);let[x,y]=[...toTile];console.log([`toTile, x, y: ${toTile}, ${x}, ${y}`]),[Configuration.gameboard[y][x].weapon,player.weapon]=[player.weapon,Configuration.gameboard[y][x].weapon],Configuration.chest=Configuration.gameboard[y][x],Configuration.restoreChest=!0,player.clearToken(),player.fillToken(),player.fromTile=[x,y],Configuration.gameboard[y][x]=null,console.log("--- Ending LootChest.LootChest(player)")}export function RestoreChest(){console.log("+++ Starting Play.RestoreChest()"),console.log(`Configuration.restoreChes: ${Configuration.restoreChest}`),Configuration.restoreChest&&console.log("--- Ending Play.RestoreChest()")}